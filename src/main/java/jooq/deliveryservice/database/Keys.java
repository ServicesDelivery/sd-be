/*
 * This file is generated by jOOQ.
 */
package jooq.deliveryservice.database;


import jooq.deliveryservice.database.tables.Category;
import jooq.deliveryservice.database.tables.Company;
import jooq.deliveryservice.database.tables.CompanyCategory;
import jooq.deliveryservice.database.tables.User;
import jooq.deliveryservice.database.tables.records.CategoryRecord;
import jooq.deliveryservice.database.tables.records.CompanyCategoryRecord;
import jooq.deliveryservice.database.tables.records.CompanyRecord;
import jooq.deliveryservice.database.tables.records.UserRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * delivery.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CategoryRecord> CATEGORY_PKEY = Internal.createUniqueKey(Category.CATEGORY, DSL.name("category_pkey"), new TableField[] { Category.CATEGORY.ID }, true);
    public static final UniqueKey<CompanyRecord> COMPANY_PKEY = Internal.createUniqueKey(Company.COMPANY, DSL.name("company_pkey"), new TableField[] { Company.COMPANY.ID }, true);
    public static final UniqueKey<UserRecord> USER_PKEY = Internal.createUniqueKey(User.USER, DSL.name("user_pkey"), new TableField[] { User.USER.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<CompanyCategoryRecord, CategoryRecord> COMPANY_CATEGORY__FK_CATEGORY_ID = Internal.createForeignKey(CompanyCategory.COMPANY_CATEGORY, DSL.name("fk_category_id"), new TableField[] { CompanyCategory.COMPANY_CATEGORY.CATEGORY_ID }, Keys.CATEGORY_PKEY, new TableField[] { Category.CATEGORY.ID }, true);
    public static final ForeignKey<CompanyCategoryRecord, CompanyRecord> COMPANY_CATEGORY__FK_COMPANY_ID = Internal.createForeignKey(CompanyCategory.COMPANY_CATEGORY, DSL.name("fk_company_id"), new TableField[] { CompanyCategory.COMPANY_CATEGORY.COMPANY_ID }, Keys.COMPANY_PKEY, new TableField[] { Company.COMPANY.ID }, true);
}
