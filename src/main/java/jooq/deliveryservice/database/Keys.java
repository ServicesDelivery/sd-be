/*
 * This file is generated by jOOQ.
 */
package jooq.deliveryservice.database;


import jooq.deliveryservice.database.tables.Address;
import jooq.deliveryservice.database.tables.Category;
import jooq.deliveryservice.database.tables.Company;
import jooq.deliveryservice.database.tables.CompanyCategory;
import jooq.deliveryservice.database.tables.District;
import jooq.deliveryservice.database.tables.Subcategory;
import jooq.deliveryservice.database.tables.User;
import jooq.deliveryservice.database.tables.UserInfo;
import jooq.deliveryservice.database.tables.records.AddressRecord;
import jooq.deliveryservice.database.tables.records.CategoryRecord;
import jooq.deliveryservice.database.tables.records.CompanyCategoryRecord;
import jooq.deliveryservice.database.tables.records.CompanyRecord;
import jooq.deliveryservice.database.tables.records.DistrictRecord;
import jooq.deliveryservice.database.tables.records.SubcategoryRecord;
import jooq.deliveryservice.database.tables.records.UserInfoRecord;
import jooq.deliveryservice.database.tables.records.UserRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * delivery.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AddressRecord> ADDRESS_PKEY = Internal.createUniqueKey(Address.ADDRESS, DSL.name("address_pkey"), new TableField[] { Address.ADDRESS.ID }, true);
    public static final UniqueKey<CategoryRecord> CATEGORY_PKEY = Internal.createUniqueKey(Category.CATEGORY, DSL.name("category_pkey"), new TableField[] { Category.CATEGORY.ID }, true);
    public static final UniqueKey<CompanyRecord> COMPANY_PKEY = Internal.createUniqueKey(Company.COMPANY, DSL.name("company_pkey"), new TableField[] { Company.COMPANY.ID }, true);
    public static final UniqueKey<DistrictRecord> DISTRICT_PKEY = Internal.createUniqueKey(District.DISTRICT, DSL.name("district_pkey"), new TableField[] { District.DISTRICT.ID }, true);
    public static final UniqueKey<SubcategoryRecord> SUBCATEGORY_PKEY = Internal.createUniqueKey(Subcategory.SUBCATEGORY, DSL.name("subcategory_pkey"), new TableField[] { Subcategory.SUBCATEGORY.ID }, true);
    public static final UniqueKey<UserRecord> USER_PKEY = Internal.createUniqueKey(User.USER, DSL.name("user_pkey"), new TableField[] { User.USER.ID }, true);
    public static final UniqueKey<UserInfoRecord> USER_INFO_PKEY = Internal.createUniqueKey(UserInfo.USER_INFO, DSL.name("user_info_pkey"), new TableField[] { UserInfo.USER_INFO.USER_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AddressRecord, DistrictRecord> ADDRESS__FK_DISTRICT_ID = Internal.createForeignKey(Address.ADDRESS, DSL.name("fk_district_id"), new TableField[] { Address.ADDRESS.DISTRICT_ID }, Keys.DISTRICT_PKEY, new TableField[] { District.DISTRICT.ID }, true);
    public static final ForeignKey<AddressRecord, UserInfoRecord> ADDRESS__FK_USER_INFO_ID = Internal.createForeignKey(Address.ADDRESS, DSL.name("fk_user_info_id"), new TableField[] { Address.ADDRESS.USER_INFO_ID }, Keys.USER_INFO_PKEY, new TableField[] { UserInfo.USER_INFO.USER_ID }, true);
    public static final ForeignKey<CompanyCategoryRecord, CategoryRecord> COMPANY_CATEGORY__FK_CATEGORY_ID = Internal.createForeignKey(CompanyCategory.COMPANY_CATEGORY, DSL.name("fk_category_id"), new TableField[] { CompanyCategory.COMPANY_CATEGORY.CATEGORY_ID }, Keys.CATEGORY_PKEY, new TableField[] { Category.CATEGORY.ID }, true);
    public static final ForeignKey<CompanyCategoryRecord, CompanyRecord> COMPANY_CATEGORY__FK_COMPANY_ID = Internal.createForeignKey(CompanyCategory.COMPANY_CATEGORY, DSL.name("fk_company_id"), new TableField[] { CompanyCategory.COMPANY_CATEGORY.COMPANY_ID }, Keys.COMPANY_PKEY, new TableField[] { Company.COMPANY.ID }, true);
    public static final ForeignKey<SubcategoryRecord, CategoryRecord> SUBCATEGORY__FK_CATEGORY_ID = Internal.createForeignKey(Subcategory.SUBCATEGORY, DSL.name("fk_category_id"), new TableField[] { Subcategory.SUBCATEGORY.CATEGORY_ID }, Keys.CATEGORY_PKEY, new TableField[] { Category.CATEGORY.ID }, true);
    public static final ForeignKey<UserInfoRecord, UserRecord> USER_INFO__FK_USER_ID = Internal.createForeignKey(UserInfo.USER_INFO, DSL.name("fk_user_id"), new TableField[] { UserInfo.USER_INFO.USER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
}
