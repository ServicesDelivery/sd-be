/*
 * This file is generated by jOOQ.
 */
package jooq.deliveryservice.database.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.deliveryservice.database.Delivery;
import jooq.deliveryservice.database.Keys;
import jooq.deliveryservice.database.tables.records.SubcategoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Subcategory extends TableImpl<SubcategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>delivery.subcategory</code>
     */
    public static final Subcategory SUBCATEGORY = new Subcategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubcategoryRecord> getRecordType() {
        return SubcategoryRecord.class;
    }

    /**
     * The column <code>delivery.subcategory.id</code>.
     */
    public final TableField<SubcategoryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>delivery.subcategory.name</code>.
     */
    public final TableField<SubcategoryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>delivery.subcategory.category_id</code>.
     */
    public final TableField<SubcategoryRecord, Integer> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Subcategory(Name alias, Table<SubcategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Subcategory(Name alias, Table<SubcategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>delivery.subcategory</code> table reference
     */
    public Subcategory(String alias) {
        this(DSL.name(alias), SUBCATEGORY);
    }

    /**
     * Create an aliased <code>delivery.subcategory</code> table reference
     */
    public Subcategory(Name alias) {
        this(alias, SUBCATEGORY);
    }

    /**
     * Create a <code>delivery.subcategory</code> table reference
     */
    public Subcategory() {
        this(DSL.name("subcategory"), null);
    }

    public <O extends Record> Subcategory(Table<O> child, ForeignKey<O, SubcategoryRecord> key) {
        super(child, key, SUBCATEGORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Delivery.DELIVERY;
    }

    @Override
    public Identity<SubcategoryRecord, Integer> getIdentity() {
        return (Identity<SubcategoryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SubcategoryRecord> getPrimaryKey() {
        return Keys.SUBCATEGORY_PKEY;
    }

    @Override
    public List<ForeignKey<SubcategoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SUBCATEGORY__FK_CATEGORY_ID);
    }

    private transient Category _category;

    /**
     * Get the implicit join path to the <code>delivery.category</code> table.
     */
    public Category category() {
        if (_category == null)
            _category = new Category(this, Keys.SUBCATEGORY__FK_CATEGORY_ID);

        return _category;
    }

    @Override
    public Subcategory as(String alias) {
        return new Subcategory(DSL.name(alias), this);
    }

    @Override
    public Subcategory as(Name alias) {
        return new Subcategory(alias, this);
    }

    @Override
    public Subcategory as(Table<?> alias) {
        return new Subcategory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Subcategory rename(String name) {
        return new Subcategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subcategory rename(Name name) {
        return new Subcategory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subcategory rename(Table<?> name) {
        return new Subcategory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
