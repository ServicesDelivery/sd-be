/*
 * This file is generated by jOOQ.
 */
package jooq.deliveryservice.database.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.deliveryservice.database.Delivery;
import jooq.deliveryservice.database.Keys;
import jooq.deliveryservice.database.tables.records.CompanyCategoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompanyCategory extends TableImpl<CompanyCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>delivery.company_category</code>
     */
    public static final CompanyCategory COMPANY_CATEGORY = new CompanyCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyCategoryRecord> getRecordType() {
        return CompanyCategoryRecord.class;
    }

    /**
     * The column <code>delivery.company_category.company_id</code>.
     */
    public final TableField<CompanyCategoryRecord, Integer> COMPANY_ID = createField(DSL.name("company_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>delivery.company_category.category_id</code>.
     */
    public final TableField<CompanyCategoryRecord, Integer> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private CompanyCategory(Name alias, Table<CompanyCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private CompanyCategory(Name alias, Table<CompanyCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>delivery.company_category</code> table reference
     */
    public CompanyCategory(String alias) {
        this(DSL.name(alias), COMPANY_CATEGORY);
    }

    /**
     * Create an aliased <code>delivery.company_category</code> table reference
     */
    public CompanyCategory(Name alias) {
        this(alias, COMPANY_CATEGORY);
    }

    /**
     * Create a <code>delivery.company_category</code> table reference
     */
    public CompanyCategory() {
        this(DSL.name("company_category"), null);
    }

    public <O extends Record> CompanyCategory(Table<O> child, ForeignKey<O, CompanyCategoryRecord> key) {
        super(child, key, COMPANY_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Delivery.DELIVERY;
    }

    @Override
    public List<ForeignKey<CompanyCategoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COMPANY_CATEGORY__FK_COMPANY_ID, Keys.COMPANY_CATEGORY__FK_CATEGORY_ID);
    }

    private transient Company _company;
    private transient Category _category;

    /**
     * Get the implicit join path to the <code>delivery.company</code> table.
     */
    public Company company() {
        if (_company == null)
            _company = new Company(this, Keys.COMPANY_CATEGORY__FK_COMPANY_ID);

        return _company;
    }

    /**
     * Get the implicit join path to the <code>delivery.category</code> table.
     */
    public Category category() {
        if (_category == null)
            _category = new Category(this, Keys.COMPANY_CATEGORY__FK_CATEGORY_ID);

        return _category;
    }

    @Override
    public CompanyCategory as(String alias) {
        return new CompanyCategory(DSL.name(alias), this);
    }

    @Override
    public CompanyCategory as(Name alias) {
        return new CompanyCategory(alias, this);
    }

    @Override
    public CompanyCategory as(Table<?> alias) {
        return new CompanyCategory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyCategory rename(String name) {
        return new CompanyCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyCategory rename(Name name) {
        return new CompanyCategory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyCategory rename(Table<?> name) {
        return new CompanyCategory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
