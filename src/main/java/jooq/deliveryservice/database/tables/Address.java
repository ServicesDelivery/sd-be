/*
 * This file is generated by jOOQ.
 */
package jooq.deliveryservice.database.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.deliveryservice.database.Delivery;
import jooq.deliveryservice.database.Keys;
import jooq.deliveryservice.database.tables.records.AddressRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Address extends TableImpl<AddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>delivery.address</code>
     */
    public static final Address ADDRESS = new Address();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AddressRecord> getRecordType() {
        return AddressRecord.class;
    }

    /**
     * The column <code>delivery.address.id</code>.
     */
    public final TableField<AddressRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>delivery.address.user_info_id</code>.
     */
    public final TableField<AddressRecord, Integer> USER_INFO_ID = createField(DSL.name("user_info_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>delivery.address.district_id</code>.
     */
    public final TableField<AddressRecord, Integer> DISTRICT_ID = createField(DSL.name("district_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>delivery.address.street</code>.
     */
    public final TableField<AddressRecord, String> STREET = createField(DSL.name("street"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>delivery.address.house</code>.
     */
    public final TableField<AddressRecord, String> HOUSE = createField(DSL.name("house"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>delivery.address.flat</code>.
     */
    public final TableField<AddressRecord, String> FLAT = createField(DSL.name("flat"), SQLDataType.VARCHAR(200), this, "");

    private Address(Name alias, Table<AddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private Address(Name alias, Table<AddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>delivery.address</code> table reference
     */
    public Address(String alias) {
        this(DSL.name(alias), ADDRESS);
    }

    /**
     * Create an aliased <code>delivery.address</code> table reference
     */
    public Address(Name alias) {
        this(alias, ADDRESS);
    }

    /**
     * Create a <code>delivery.address</code> table reference
     */
    public Address() {
        this(DSL.name("address"), null);
    }

    public <O extends Record> Address(Table<O> child, ForeignKey<O, AddressRecord> key) {
        super(child, key, ADDRESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Delivery.DELIVERY;
    }

    @Override
    public Identity<AddressRecord, Integer> getIdentity() {
        return (Identity<AddressRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AddressRecord> getPrimaryKey() {
        return Keys.ADDRESS_PKEY;
    }

    @Override
    public List<ForeignKey<AddressRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ADDRESS__FK_USER_INFO_ID, Keys.ADDRESS__FK_DISTRICT_ID);
    }

    private transient UserInfo _userInfo;
    private transient District _district;

    /**
     * Get the implicit join path to the <code>delivery.user_info</code> table.
     */
    public UserInfo userInfo() {
        if (_userInfo == null)
            _userInfo = new UserInfo(this, Keys.ADDRESS__FK_USER_INFO_ID);

        return _userInfo;
    }

    /**
     * Get the implicit join path to the <code>delivery.district</code> table.
     */
    public District district() {
        if (_district == null)
            _district = new District(this, Keys.ADDRESS__FK_DISTRICT_ID);

        return _district;
    }

    @Override
    public Address as(String alias) {
        return new Address(DSL.name(alias), this);
    }

    @Override
    public Address as(Name alias) {
        return new Address(alias, this);
    }

    @Override
    public Address as(Table<?> alias) {
        return new Address(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(String name) {
        return new Address(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(Name name) {
        return new Address(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(Table<?> name) {
        return new Address(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Integer, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
